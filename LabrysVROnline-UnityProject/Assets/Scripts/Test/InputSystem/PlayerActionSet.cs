//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Test/InputSystem/PlayerActionSet.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActionSet : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActionSet()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActionSet"",
    ""maps"": [
        {
            ""name"": ""MovementActionMap"",
            ""id"": ""51c7fd7b-b1e9-4015-9564-3951d440659d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""d2466159-d9b8-473e-8476-2e64725baedd"",
                    ""expectedControlType"": ""Key"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6abd7236-b5d8-4a06-8d8f-a0f80dd4f447"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""TestKeyboardSchema"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""TestKeyboardSchema"",
            ""bindingGroup"": ""TestKeyboardSchema"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MovementActionMap
        m_MovementActionMap = asset.FindActionMap("MovementActionMap", throwIfNotFound: true);
        m_MovementActionMap_Newaction = m_MovementActionMap.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovementActionMap
    private readonly InputActionMap m_MovementActionMap;
    private IMovementActionMapActions m_MovementActionMapActionsCallbackInterface;
    private readonly InputAction m_MovementActionMap_Newaction;
    public struct MovementActionMapActions
    {
        private @PlayerActionSet m_Wrapper;
        public MovementActionMapActions(@PlayerActionSet wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MovementActionMap_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_MovementActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActionMapActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActionMapActions instance)
        {
            if (m_Wrapper.m_MovementActionMapActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_MovementActionMapActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_MovementActionMapActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_MovementActionMapActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_MovementActionMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public MovementActionMapActions @MovementActionMap => new MovementActionMapActions(this);
    private int m_TestKeyboardSchemaSchemeIndex = -1;
    public InputControlScheme TestKeyboardSchemaScheme
    {
        get
        {
            if (m_TestKeyboardSchemaSchemeIndex == -1) m_TestKeyboardSchemaSchemeIndex = asset.FindControlSchemeIndex("TestKeyboardSchema");
            return asset.controlSchemes[m_TestKeyboardSchemaSchemeIndex];
        }
    }
    public interface IMovementActionMapActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
